generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Posts {
  post_id        Int      @id @default(autoincrement()) 
  createdAt DateTime @default(now())
  title     String
  content   String?
  published Boolean  @default(false)
  author    Users     @relation(fields: [authorId], references: [user_id]) 
  authorId  Int    
}

model Profiles {
  profile_id     Int     @default(autoincrement()) @id
  name String
  user UsersOnProfile[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Users {
  user_id      Int      @id @default(autoincrement())
  name    String?
  email   String   @unique
  password String
  wallet String?  @unique
  image String?
  totalRewards Int @default(0)
  status Boolean   @default(true)
  posts   Posts[]  
  courses   Courses[] 
  profile UsersOnProfile[] 
  enroll UsersOnCourses[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UsersOnProfile {
  user Users @relation(fields: [userId], references: [user_id])
  userId Int
  profile Profiles @relation(fields: [profileId], references: [profile_id])
  profileId Int
  status Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([userId, profileId])
}

model Categories {
  category_id      Int      @id @default(autoincrement())  
  name    String?
  status    Boolean? @default(true)
  image    String?
  courser   Courses[]  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Courses {
  course_id      Int      @id @default(autoincrement())  
  name    String?
  description String?
  price Float?
  duration Float?  
  image    String? 
  video   String?
  lesson Int?   @default(0)
  rating   Int?  @default(0)
  tests   Int?  @default(0)
  categoryId Int
  authorId Int   
  status    Boolean @default(true)
  category    Categories     @relation(fields: [categoryId], references: [category_id]) 
  author    Users     @relation(fields: [authorId], references: [user_id]) 
  modules Modules[]
  users UsersOnCourses[]
  rewards Rewards[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Modules {
  module_id      Int      @id @default(autoincrement())  
  name    String?
  description String?
  status    Boolean @default(true)
  image    String?
  class Int?  @default(0)
  time  Float?  @default(0)
  course    Courses?     @relation(fields: [courseId], references: [course_id]) 
  courseId Int?
  lessons Lessons[]
  test   Tests[]
  modulesOnCourse ModulesOnCourse[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lessons {
  lesson_id      Int      @id @default(autoincrement())  
  name    String?
  status    Boolean @default(true)
  image    String?
  video   String
  module    Modules?     @relation(fields: [moduleId], references: [module_id]) 
  moduleId Int?
  resources Resources[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resources {
  resource_id      Int      @id @default(autoincrement())  
  name    String?
  description String?
  status    Boolean @default(true)
  url    String?
  lesson    Lessons?     @relation(fields: [lessonId], references: [lesson_id])   
  lessonId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


//EVALUACIONES
model Tests {
  test_id      Int      @id @default(autoincrement())
  description String?
  module    Modules     @relation(fields: [moduleId], references: [module_id])   
  moduleId Int
  status    Boolean @default(true)
  questions Questions[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  testAnswers TestAnswers[]
  rewards      Rewards[] 
}

model Questions {
  question_id      Int      @id @default(autoincrement())
  text String?
  order Int
  status    Boolean @default(true)
  test    Tests?     @relation(fields: [testId], references: [test_id]) 
  testId Int?
  options Options[]
  testAnswers TestAnswers[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
}

model Options {
  id      Int      @id @default(autoincrement())
  text String?
  order Int
  status    Boolean @default(true)
  value Boolean @default(false)
  question    Questions? @relation(fields: [questionId], references: [question_id]) 
  questionId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//MATRICULAS
model UsersOnCourses {
  useroncourse_Id Int @id @default(autoincrement())
  user Users? @relation(fields: [userId], references: [user_id])
  userId  Int? 
  course Courses? @relation(fields: [courseId], references: [course_id])
  courseId Int?
  progress Float
  ended Boolean @default(false)
  grade Float
  rating Int  @default(0)
  review String?
  reward Int  @default(0)  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  modulesOnCourse ModulesOnCourse[]
  testAnswers     TestAnswers[]
  rewards         Rewards[]
}

//Modulos que estudiantes estan cursando o cursaron.
model ModulesOnCourse {
  useronmodule_id   Int             @id @default(autoincrement())
  module            Modules?         @relation(fields: [module_id], references: [module_id])
  module_id         Int?
  usersOnCourse     UsersOnCourses?  @relation(fields: [userOnCourse_id], references: [useroncourse_Id])
  userOnCourse_id   Int?
  lessonsCompleted  Int             @default(0)
  progress          Int             @default(0)
  isEnded           Boolean         @default(false)
  grade             Float           @default(0)
  moduleRating      Int             @default(0)
  userReview        String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model TestAnswers {
  testAnwers_id     Int             @id @default(autoincrement())
  usersOnCourse     UsersOnCourses?  @relation(fields: [userOnCourse_id], references: [useroncourse_Id])
  userOnCourse_id   Int?
  test              Tests?           @relation(fields: [test_id], references: [test_id])
  test_id           Int?
  question          Questions?       @relation(fields: [question_id], references: [question_id])
  question_id       Int?
  optionSelected    Int
  value             Boolean         @default(false)
}

model Rewards {
  reward_id   Int               @id @default(autoincrement())
  course      Courses?          @relation(fields: [courseId], references: [course_id])
  courseId    Int?      
  userOnCourse  UsersOnCourses? @relation(fields: [student_id], references: [useroncourse_Id])
  student_id  Int?  
  amount      Int               @default(0)
  wallet      String            @default("")
  status      Boolean           @default(true)
  test_id        Int?             
  test          Tests?            @relation(fields: [test_id], references: [test_id])
  transaction Transactions[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transactions {
  transaction_id  Int       @id @default(autoincrement())
  reward          Rewards?  @relation(fields: [rewardId], references: [reward_id])
  rewardId        Int?      @default(0)
  date            DateTime 
  Tx_id           String    @default("")
  fee             Float     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model total_questions {
  count BigInt
  @@ignore
}

model user_wallet {
  wallet String
  @@ignore
}
